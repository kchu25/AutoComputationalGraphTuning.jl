var documenterSearchIndex = {"docs":
[{"location":"#AutoComputationalGraphTuning","page":"Home","title":"AutoComputationalGraphTuning","text":"","category":"section"},{"location":"","page":"Home","title":"Home","text":"Documentation for AutoComputationalGraphTuning.","category":"page"},{"location":"","page":"Home","title":"Home","text":"","category":"page"},{"location":"#AutoComputationalGraphTuning.DataSplit","page":"Home","title":"AutoComputationalGraphTuning.DataSplit","text":"DataSplit\n\nRepresents a single data split with tensor and labels.\n\nFields\n\ntensor: Encoded sequence tensor (4D array)\nlabels: Labels (vector or matrix)\nstats: Normalization statistics (only present for training data when normalized)\n\n\n\n\n\n","category":"type"},{"location":"#AutoComputationalGraphTuning.PreprocessedData","page":"Home","title":"AutoComputationalGraphTuning.PreprocessedData","text":"PreprocessedData\n\nContainer for preprocessed train/validation/test splits.\n\nFields\n\ntrain: Training data split\nval: Validation data split\ntest: Test data split\n\n\n\n\n\n","category":"type"},{"location":"#AutoComputationalGraphTuning.check_early_stopping!-NTuple{9, Any}","page":"Home","title":"AutoComputationalGraphTuning.check_early_stopping!","text":"Check early stopping condition and update best model state\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.get_split_indices-Tuple{Int64}","page":"Home","title":"AutoComputationalGraphTuning.get_split_indices","text":"get_split_indices(data_size::Int; train_ratio=0.8, val_ratio=0.1, test_ratio=0.1, shuffle=true, seed=nothing)\n\nReturn shuffled (or ordered) indices for train/validation/test splits.\n\nArguments\n\ndata_size: Number of data points\ntrain_ratio, val_ratio, test_ratio: Proportions for each split (must sum to 1)\nshuffle: Shuffle indices (default: true)\nseed: Random seed (optional)\n\nReturns\n\nNamed tuple: (train, val, test) index vectors\n\nThrows\n\nArgumentError if ratios are invalid or data_size <= 0\n\nExample\n\ntrainidx, validx, testidx = getsplit_indices(1000; seed=42)\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.leading_colons-Tuple{Any}","page":"Home","title":"AutoComputationalGraphTuning.leading_colons","text":"train_val_test_split(data, labels; train_ratio=0.8, val_ratio=0.1, test_ratio=0.1, shuffle=true, seed=nothing)\n\nExample\n\nA = rand(3, 4, 5)\nA[leading_colons(A)..., 2]  # selects all elements in the last dimension at index 2\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.print_epoch_summary-NTuple{6, Any}","page":"Home","title":"AutoComputationalGraphTuning.print_epoch_summary","text":"Print epoch summary with training and validation metrics\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.set_reproducible_seeds!","page":"Home","title":"AutoComputationalGraphTuning.set_reproducible_seeds!","text":"Set all random seeds for reproducible results\n\n\n\n\n\n","category":"function"},{"location":"#AutoComputationalGraphTuning.train_batch!-NTuple{4, Any}","page":"Home","title":"AutoComputationalGraphTuning.train_batch!","text":"Train single batch and return loss and statistics\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.train_epoch!-NTuple{5, Any}","page":"Home","title":"AutoComputationalGraphTuning.train_epoch!","text":"Train single epoch and return epoch statistics\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.train_model-NTuple{5, Any}","page":"Home","title":"AutoComputationalGraphTuning.train_model","text":"train_model(model, opt_state, train_dl, val_dl, output_dim; \n            max_epochs=50, patience=10, min_delta=1e-4, print_every=100)\n\nTrain a model with early stopping and return the best model state and training stats.\n\nReturns\n\nbest_model_state: State dict of the best model (lowest validation loss)\ntraining_stats: Dict with training history and final metrics\n\n\n\n\n\n","category":"method"},{"location":"#AutoComputationalGraphTuning.train_val_test_split-Tuple{Any}","page":"Home","title":"AutoComputationalGraphTuning.train_val_test_split","text":"train_val_test_split(data, labels; train_ratio=0.8, val_ratio=0.1, test_ratio=0.1, shuffle=true, seed=nothing)\n\nSplit data and labels together into train/validation/test sets.\n\nUses view() for memory efficiency - returns lightweight views instead of copying data.\n\nArguments\n\nraw_data: Data to split (vectors, arrays, etc.)\nlabels: Corresponding labels (vector or matrix where first dimension = number of samples)\nOther arguments same as index-based version\n\nReturns\n\nNamed tuple with (train=(data=..., labels=...), val=(...), test=(...))\nAll data and labels are views (SubArrays) for memory efficiency\n\nExamples\n\n# Vector labels\nsequences = [\"ATCG\", \"GCTA\", \"TTAG\"]  \nlabels = [0.1, 0.5, 0.9]\nsplits = train_val_test_split(sequences, labels; seed=42)\n\n# Matrix labels (multi-target)\nlabels_matrix = [0.1 0.2; 0.5 0.6; 0.9 0.8]  # 3 samples, 2 targets each\nsplits = train_val_test_split(sequences, labels_matrix; seed=42)\ntrain_labels = splits.train.labels  # Will be 2D matrix view\n\n# Views are memory efficient but behave like regular arrays\nprintln(typeof(splits.train.data))  # SubArray{...}\nprintln(splits.train.data[1])       # Access works normally\n\n\n\n\n\n","category":"method"}]
}
